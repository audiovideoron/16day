import os
import json
import pandas as pd
import logging
import requests
import msal

logging.basicConfig(filename='events.log', level=logging.INFO)

# Load Config
def load_config():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(script_dir, 'config.json')
    with open(config_path, 'r') as f:
        return json.load(f)

# Initialize Microsoft Graph API client
def authenticate_client(client_id, client_secret, tenant_id):
    authority = f"https://login.microsoftonline.com/{tenant_id}"
    app = msal.ConfidentialClientApplication(client_id, authority=authority, client_credential=client_secret)
    
    # Try to get a token from the cache or refresh token
    result = app.acquire_token_silent(["https://graph.microsoft.com/.default"], account=None)
    
    if not result:
        result = app.acquire_token_for_client(scopes=["https://graph.microsoft.com/.default"])
    
    if "access_token" in result:
        return result['access_token']
    else:
        logging.error(f"Could not acquire token. Full result: {json.dumps(result)}")
        return None



# Add to Calendar
def add_to_calendar(df, token):
    for index, row in df.drop_duplicates(subset=['Event Start Date', 'Account']).iterrows():
        event_start_date = pd.Timestamp(row['Event Start Date']).strftime('%Y-%m-%dT%H:%M:%S')
        account_name = row['Account']
        
        logging.info(f"Trying to add event: {account_name} on {event_start_date}")
        
        # Prepare the API call
        user_email = "audiovideoron@gmail.com"  # Replace this with the actual email
        url = f'https://graph.microsoft.com/v1.0/users/{user_email}/events'
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
        
        payload = json.dumps({
            "subject": account_name,
            "start": {
                "dateTime": event_start_date,
                "timeZone": "UTC"
            },
            "end": {
                "dateTime": event_start_date,
                "timeZone": "UTC"
            },
            "isAllDay": True,
        })

        response = requests.post(url, headers=headers, data=payload)
        
        if response.status_code == 201:
            logging.info(f"Successfully added event: {account_name}")
        else:
            logging.error(f"Failed to add event {account_name}. Error: {response.text}")

# Your 'remove_from_calendar' function would go here, following a similar approach

if __name__ == '__main__':
    # Initialize logging and load config
    logging.info("Starting main application.")
    config = load_config()
    
    # Read Excel data
    xlsx_file = './16DaySept.xlsx'
    df = pd.read_excel(xlsx_file)
    
    # Apply filters
    logging.info("Applying filters.")
    # (Your filtering logic here)

    # Get token
    client_id = '9129e447-8a2b-44f7-9d60-740733c61a32'
    client_secret = 'CqQ8Q~JSS_Uv1NYcm1aeYGTa3-tM5WV0LF~IOcbO'
    tenant_id = '88361c82-35ad-4bd8-b1d3-d35aa7878a27'
    token = authenticate_client(client_id, client_secret, tenant_id)
    
    if token:
        action = input("Would you like to 'Add' or 'Remove' events? (Enter 'Add' or 'Remove'): ").strip().lower()
        
        if action == 'add':
            logging.info("Adding events to calendar.")
            add_to_calendar(df, token)
        # elif action == 'remove':
        #     Your 'remove_from_calendar' logic here
        else:
            logging.error("Invalid action choice.")
            print("Invalid choice. Please enter 'Add' or 'Remove'.")
    else:
        logging.error("Could not acquire token.")
